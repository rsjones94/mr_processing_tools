!!ARBvp1.0
#
# Vertex program for rendering GLVolume instances. 
#
# Performs a standard transformation of the vertex coordinates, and
# passes the corresponding voxel and texture coordinates through to the
# fragment program.
#
# Input parameters:
#    imageShape     - image shape
#    clipCoordXform - Matrix which transforms image texture coordinates
#                     into clip image texture coordinates.
# 
# Input attributes:
#    texCoord - Texture coordinates
#
# Outputs:
#    texCoord     - Image texture coordinates
#    clipTexCoord - Clip image texture coordinates
#    voxCoord     - Voxel coordinates
#

PARAM imageShape        = {{ param_imageShape      }};
PARAM clipCoordXform[4] = {{ param4_clipCoordXform }};

TEMP voxCoord;
TEMP texCoord;

# Transform the vertex position
# into display coordinates.
DP4 result.position.x, state.matrix.mvp.row[0], vertex.position;
DP4 result.position.y, state.matrix.mvp.row[1], vertex.position;
DP4 result.position.z, state.matrix.mvp.row[2], vertex.position;
DP4 result.position.w, state.matrix.mvp.row[3], vertex.position;

# Get the texture coordinates, make
# sure the 4th component is 1.
MOV texCoord, {{ attr_texCoord }};
MOV texCoord.w, 1;

# Transform the texture coordinates
# into voxel coordinates.
MUL voxCoord, texCoord, imageShape;

# Pass texture and voxel coordinates
# through to the fragment program.
MOV {{ varying_texCoord }}, texCoord;
MOV {{ varying_voxCoord }}, voxCoord;

# Transform the image texture
# coordinates into clip image
# texture coordinates.
DP4 {{ varying_clipTexCoord }}.x, clipCoordXform[0], texCoord;
DP4 {{ varying_clipTexCoord }}.y, clipCoordXform[1], texCoord;
DP4 {{ varying_clipTexCoord }}.z, clipCoordXform[2], texCoord;
DP4 {{ varying_clipTexCoord }}.w, clipCoordXform[3], texCoord;

END
